#!/bin/bash
typeset script="$_" arg0="$0"
if [[ "\\${KSH_VERSION}" == "\\"?(*MIRBSD*) ]]; then
  NOGLOB='set -o noglob'; GLOB='set +o noglob';
else
  NOGLOB='set +o glob'; GLOB='set -o glob';
fi

eval "$NOGLOB"
for _arg in "${script}" "${arg0}"; do
  [[ "${_arg##*/}" == configure ]] || continue
  script="${_arg}"
  break
done

if [[ ! -e "${script}" ]]; then
  script="$( whence -p "${script}"; )"
else
  script="$( readlink -f "${script}"; )"
fi
: ${srcdir:=${srcdir:-${script%%*([/])+([!/])}}}
builddir="$( pwd )"
srcdir="$( realpath "${srcdir}"; )"
srcdir="${srcdir%/*}"
cd "${builddir}" || exit 126

export srcdir="${srcdir}" builddir="${builddir}" top_srcdir="${srcdir}" top_builddir="${builddir}"


printf "%s\n" "script: ${script}" 1>&2
printf "%s\n" "arg0: ${arg0}" 1>&2
printf "%s\n" "builddir: ${builddir}" 1>&2

: ${TMPDIR:=${TMPDIR:-${TMP:-/tmp}}}
mkdir -p "${builddir}";

n_srcdir=${#srcdir}
IFS=$'\n'
config_files=( $( find "${srcdir}" -type f -a -name "*.in" | cut -c $(( n_srcdir+2 ))- ) );
printf "%s\n" "config_files: $( typeset -p -a config_files 2>&1 | sed -s -r -e 's~^typeset [^=]+=~~; 1h; 1!H; $!d
x
s~\n~ ~g;'; )" 1>&2
for config_file in "${config_files[@]}"; do
  input_file="${srcdir}/${config_file}"
  output_file="${builddir}/${config_file%%.in}"
  printf "%s\n" "Generating file: '${output_file}' ..." 1>&2
  printf "%s\n" "From input file: '${input_file}'" 1>&2
  output_dir="${output_file%/*}"
  mkdir -p "${output_dir}";
  typeset -a lines
  IFS=$'\n'; lines=( $( sed -r "${input_file}" -e '
    :a \~@([a-zA-Z_][a-zA-Z0-9_]*)@~!{ bz; };
    :b s~^(.*)@([a-zA-Z0-9_]+)@(.*)$~@\2@\n\1%%\3;~;
      s~^@([a-zA-Z0-9_]+)@~s%__at__\1__at__%${\1}%g\n  tstart;~;
      ta;
    :z \~\n~{
      s~\n[^\n]*$~~;
      tk;
    };
    d;
    :k s~__at__~@~g;
    ' \
  | sed -s -r -e '1i\:start' \
  | sed -s -r -e 's%^%.%;' \
  ; ) );
  
  printf "read %d lines\n" ${#lines[@]} 1>&2
  IFS='\n'; for ln in "${lines[@]}"; do
    printf "processing ln=[%s]\n" "$ln" 1>&2
    evalstr="${ln//"'"/"'\"'\"'"}"
    evalstr="${evalstr//"\""/'\"'}"
    evalstr="printf \"%s\\n\" \"${evalstr}\""
    printf "    evalstr=[%s]\n" "$evalstr" 1>&2
    eval "${evalstr}"
  done \
    | cut -d. -f 2- \
    | tee /proc/$$/fd/2 \
    | sed -r -f - \
    -- "${input_file}" \
     > "${output_file}"

  ls -lA -- "${input_file}" "${output_file}"
  [[ -f "${output_file}" ]] || exit 124
done



